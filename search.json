[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Test Website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#chapters",
    "href": "index.html#chapters",
    "title": "Test Website",
    "section": "Chapters",
    "text": "Chapters\n\n\n\nChapters\nURLs\n\n\n\n\nChapter 1\nChapter 1\n\n\nChapter 2\nChapter 2"
  },
  {
    "objectID": "chapters/chapter1/online_chapter1.html",
    "href": "chapters/chapter1/online_chapter1.html",
    "title": "Chapter 1: What is Orleans",
    "section": "",
    "text": "Orleans is a virtual actor framework. It is a framework for building distributed, high-scale computing applications, without the need to learn and apply complex concurrency or other scaling patterns. It was created by Microsoft Research and designed for use in the cloud.\n\n\nflowchart TB\n    client -.- tcpip01(\"TCP/IP\")\n    tcpip01 -.-&gt; server\n    server -.- tcpip02(\"TCP/IP\")\n    tcpip02 -.-&gt; client\n    style tcpip01 stroke-dasharray: 5 5\n    style tcpip02 stroke-dasharray: 5 5\n    subgraph server [Silo Host]\n        SiloHostBuilder --&gt;|\"Build()\\nthen\\nStartAsync()\"| silo[\"Orleans Silo\\n(started)\"]\n        silo --&gt;|\"Waiting\\nincoming\\nRPC request\"| silo\n        silo == \"4. activate\\nHelloworldGrain\\ninstance\" ==o helloworld_grain(HelloWorld Grain)\n        silo -- \"call\\nStopAsync()\" ----&gt; stopped[\"stopped Silo\"]\n    end\n    subgraph client [Console Client]\n        ClientBuilder --&gt;|\"Build()\"| orleans_client[Orleans Client]\n        orleans_client --&gt;|\"1. Connect()\"| connected_client[\"Orleans Client\\n(connected)\"]\n        connected_client == \"2. call\\nGetGrain#lt;IHelloGrain#gt;(0)\\n\\n\\nget\\nIHelloGrain\\nRPC Proxy instnace\" ==&gt; ihello_proxy[[IHelloGrain Proxy]]           \n        ihello_proxy == \"3. call\\n SayHello()\" ==&gt;silo\n        helloworld_grain == \"5. return\\nSayHello()\\nresult\" ==&gt;ihello_proxy --&gt; rpc_result([\"#quot;Hello World!#quot;\"])\n        connected_client -----&gt;|\"call\\nClose()\"| disconnected_client[\"Orleans Client\\n(disconnected)\"] --&gt;|\"call Dispose()\"|dispoed[Disposed client]\n    end"
  },
  {
    "objectID": "chapters/chapter1/online_chapter1.html#the-calling-flow-chart",
    "href": "chapters/chapter1/online_chapter1.html#the-calling-flow-chart",
    "title": "Chapter 1: What is Orleans",
    "section": "",
    "text": "flowchart TB\n    client -.- tcpip01(\"TCP/IP\")\n    tcpip01 -.-&gt; server\n    server -.- tcpip02(\"TCP/IP\")\n    tcpip02 -.-&gt; client\n    style tcpip01 stroke-dasharray: 5 5\n    style tcpip02 stroke-dasharray: 5 5\n    subgraph server [Silo Host]\n        SiloHostBuilder --&gt;|\"Build()\\nthen\\nStartAsync()\"| silo[\"Orleans Silo\\n(started)\"]\n        silo --&gt;|\"Waiting\\nincoming\\nRPC request\"| silo\n        silo == \"4. activate\\nHelloworldGrain\\ninstance\" ==o helloworld_grain(HelloWorld Grain)\n        silo -- \"call\\nStopAsync()\" ----&gt; stopped[\"stopped Silo\"]\n    end\n    subgraph client [Console Client]\n        ClientBuilder --&gt;|\"Build()\"| orleans_client[Orleans Client]\n        orleans_client --&gt;|\"1. Connect()\"| connected_client[\"Orleans Client\\n(connected)\"]\n        connected_client == \"2. call\\nGetGrain#lt;IHelloGrain#gt;(0)\\n\\n\\nget\\nIHelloGrain\\nRPC Proxy instnace\" ==&gt; ihello_proxy[[IHelloGrain Proxy]]           \n        ihello_proxy == \"3. call\\n SayHello()\" ==&gt;silo\n        helloworld_grain == \"5. return\\nSayHello()\\nresult\" ==&gt;ihello_proxy --&gt; rpc_result([\"#quot;Hello World!#quot;\"])\n        connected_client -----&gt;|\"call\\nClose()\"| disconnected_client[\"Orleans Client\\n(disconnected)\"] --&gt;|\"call Dispose()\"|dispoed[Disposed client]\n    end"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n\n\n\nNote\n\n\n\nNote this website is for testing GitHub Pages action auto deploy GitHub Pages with Quarto.\nDo not believe anything you read here."
  },
  {
    "objectID": "chapters/chapter2/online_chapter2.html",
    "href": "chapters/chapter2/online_chapter2.html",
    "title": "Chapter 2: What is Actor Model?",
    "section": "",
    "text": "Actor model is a mathematical model of concurrent computation. It treats “actors” as the universal primitives of concurrent computation. In response to a message that it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received."
  }
]